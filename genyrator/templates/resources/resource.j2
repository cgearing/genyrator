{%- set entity = template.entity -%}
{%- set identifier_column = entity.identifier_column -%}
{%- set schema_name = entity.python_name + '_schema' -%}
{%- set schema_name_many = entity.plural + '_many_schema' -%}
import json
from flask import request, abort, json as flask_json
from flask_restplus import Resource, fields, Namespace
from sqlalchemy.orm import joinedload
from typing import Optional
from {{ template.module_name }}.core.convert_dict import python_dict_to_json_dict, json_dict_to_python_dict
from {{ template.db_import_path }} import db
from {{ template.module_name }}.sqlalchemy.model import *
from {{ template.module_name }}.schema import *
from {{ template.module_name }}.sqlalchemy.model_to_dict import model_to_dict

api = Namespace('{{ entity.resource_namespace }}', path='{{ entity.resource_path }}')

{{ template.restplus_template }}

{{ entity.python_name }}_schema = {{ entity.class_name }}Schema()
{{ entity.plural }}_many_schema = {{ entity.class_name }}Schema(many=True)

{%- macro find_element_by_id() -%}
    result: Optional[{{ entity.class_name }}] = {{ entity.class_name }}.query.filter_by({# -#}
{{ entity.identifier_column.python_name }}={# -#}
{{ entity.identifier_column.json_property_name }}){# -#}
{%- endmacro -%}

{%- if entity.supports_put or entity.supports_get_one or entity.supports_delete_one %}


@api.route('/{{ entity.dashed_name }}/<{{ entity.identifier_column.json_property_name }}>', endpoint='{{ entity.python_name }}_by_id')
class {{ entity.class_name }}Resource(Resource):  # type: ignore
    {%- if entity.supports_get_one %}
    @api.marshal_with({{ entity.python_name }}_model)
    @api.doc(id='get-{{ entity.python_name }}-by-id', responses={401: 'Unauthorised', 404: 'Not Found'})
    def get(self, {{ entity.identifier_column.json_property_name }}):  # type: ignore
        {{ find_element_by_id() }}.first()
        if result is None:
            abort(404)
        return python_dict_to_json_dict(model_to_dict(result))

    {% endif -%}{# get_one method #}
    {% if entity.supports_delete_one -%}
    @api.doc(id='delete-{{ entity.python_name }}-by-id', responses={401: 'Unauthorised', 404: 'Not Found'})
    def delete(self, {{ entity.identifier_column.json_property_name }}):  # type: ignore
        result: Optional[{{ entity.class_name }}] = {{ entity.class_name }}.query.filter_by({# -#}
{{ entity.identifier_column.python_name }}={# -#}
{{ entity.identifier_column.json_property_name }}){# -#}
.delete()
        if result != 1:
            abort(404)
        db.session.commit()
        return '', 204

{# -#}
    {%- endif -%}{# delete_one method #}
    {%- if entity.supports_put %}
    @api.expect({{ entity.python_name }}_model, validate=False)
    def put(self, {{ entity.identifier_column.json_property_name }}):  # type: ignore
        data = json.loads(request.data)
        if type(data) is not dict:
            return abort(400)

        {{ find_element_by_id() }}.first()

        if '{{ entity.identifier_column.json_property_name }}' not in data:
            data['{{ entity.identifier_column.json_property_name }}'] = {# -#}
                {{ identifier_column.python_type.value }}({{ entity.identifier_column.json_property_name }})

        marshmallow_result = {{ entity.python_name }}_schema.load(
            json_dict_to_python_dict(data),
            session=db.session,
            instance=result,
        )
        if marshmallow_result.errors:
            abort(400, marshmallow_result.errors)

        db.session.add(marshmallow_result.data)
        db.session.commit()
        return '', 201
{#  -#}
    {%- endif -%}{# put method #}
{%- endif %}{# single class #}
{%- if entity.supports_get_all or entity.supports_delete_all or entity.supports_post %}


@api.route('/{{ entity.dashed_plural }}', endpoint='{{ entity.resource_namespace }}')
class Many{{ entity.class_name }}Resource(Resource):  # type: ignore
    {%- if entity.supports_get_all %}
    @api.marshal_with({{ entity.python_name }}_model)
    def get(self):
        return {{ schema_name_many }}.dumps({{ entity.class_name }}.query.all())

    {% endif -%}{# get_all method #}
    {% if entity.supports_post %}
    def post(self):  # type: ignore
        ...
{#-        data = json.loads(request.data)-#}
{#-        if type(data) is not dict:-#}
{#-            return abort(400)-#}
{#--#}
{#-        {{ find_element_by_id() }}.first()-#}
{#-        if result is not None:-#}
{#-            abort(400, {"{{ entity.identifier_column.json_property_name }}": {# -#}
{#-                "A {{ entity.class_name }} with {{ entity.identifier_column.json_property_name }} {# -#}
{#-                {} already exists".format({{ entity.identifier_column.json_property_name }})})-#}
{#--#}
{#-        marshmallow_result = {{ entity.python_name }}_schema.load(json_dict_to_python_dict(data), session=db.session)-#}
{#-        if marshmallow_result.errors:-#}
{#-            abort(400, marshmallow_result.errors)-#}
{#--#}
{#-        db.session.add(marshmallow_result.data)-#}
{#-        db.session.commit()-#}
{#-        return '', 201-#}
        {% endif %}{# support post #}
{% endif %}{# many class #}

{%- if entity.api_paths -%}
{% macro joinedload(relationship) -%}
    joinedload('{{ relationship }}')
{%- endmacro -%}
{% for api_path in entity.api_paths %}
@api.route('/{{ entity.dashed_name }}/<{{ entity.identifier_column.json_property_name }}>/{{ api_path.route }}', endpoint='{{ api_path.endpoint }}')
class {{ api_path.class_name }}(Resource):  # type: ignore
    @api.doc(id='{{ api_path.endpoint }}', responses={401: 'Unauthorised', 404: 'Not Found'})
    def get(self, {{ entity.identifier_column.json_property_name }}):  # type: ignore
        result: Optional[{{ entity.class_name }}] = {{ entity.class_name }} \
            .query \
            .options({#  -#}
    {%- set sep = joiner('.') -%}
    {%- for entity in api_path.joined_entities -%}
        {{ sep() }}{{ joinedload(entity) }}
    {%- endfor -%}
            ) \
            .filter_by({# -#}
                {{ entity.identifier_column.python_name }}={# -#}
                {{ entity.identifier_column.json_property_name }}{# -#}
            ) \
            .first()
        if result is None:
            abort(404)
        return python_dict_to_json_dict(model_to_dict(result, ['{#  -#}
    {%- set sep = joiner("', '") -%}
    {%- for entity in api_path.joined_entities -%}
        {{ sep() }}{{ entity }}
    {%- endfor %}']))


{% endfor -%}
{%- endif %}
