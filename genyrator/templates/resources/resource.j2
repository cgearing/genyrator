from flask import request, abort, json
from flask_restplus import Resource, fields, Namespace
from sqlalchemy.orm import joinedload
from typing import Optional
from {{ template.module_name }}.core.convert_dict import python_dict_to_json_dict, json_dict_to_python_dict
from {{ template.db_import_path }} import db
from {{ template.module_name }}.sqlalchemy.model import *
from {{ template.module_name }}.schema import *
from {{ template.module_name }}.sqlalchemy.model_to_dict import model_to_dict

api = Namespace('{{ template.entity.resource_namespace }}', path='{{ template.entity.resource_path }}')

{{ template.restplus_template }}

{{ template.entity.python_name }}_schema = {{ template.entity.class_name }}Schema()
{{ template.entity.plural }}_many_schema = {{ template.entity.class_name }}Schema(many=True)

{%- macro find_element_by_id() -%}
    result: Optional[{{ template.entity.class_name }}] = {{ template.entity.class_name }}.query.filter_by({# -#}
{{ template.entity.identifier_column.python_name }}={# -#}
{{ template.entity.identifier_column.json_property_name }}){# -#}
{%- endmacro %}


@api.route('/{{ template.entity.dashed_name }}/<{{ template.entity.identifier_column.json_property_name }}>', endpoint='{{ template.entity.python_name }}_by_id')
class Get{{ template.entity.class_name }}Resource(Resource):  # type: ignore
    @api.marshal_with({{ template.entity.python_name }}_model)
    @api.doc(id='get-{{ template.entity.python_name }}-by-id', responses={401: 'Unauthorised', 404: 'Not Found'})
    def get(self, {{ template.entity.identifier_column.json_property_name }}):  # type: ignore
        {{ find_element_by_id() }}.first()
        if result is None:
            abort(404)
        return python_dict_to_json_dict(model_to_dict(result))

    @api.doc(id='delete-{{ template.entity.python_name }}-by-id', responses={401: 'Unauthorised', 404: 'Not Found'})
    def delete(self, {{ template.entity.identifier_column.json_property_name }}):  # type: ignore
        result: Optional[{{ template.entity.class_name }}] = {{ template.entity.class_name }}.query.filter_by({# -#}
{{ template.entity.identifier_column.python_name }}={# -#}
{{ template.entity.identifier_column.json_property_name }}){# -#}
.delete()
        if result != 1:
            abort(404)
        db.session.commit()
        return '', 204


@api.route('/{{ template.entity.resource_namespace }}', endpoint='{{ template.entity.resource_namespace }}')
class Post{{ template.entity.class_name }}Resource(Resource):  # type: ignore
    @api.marshal_with({{ template.entity.python_name }}_model)
    @api.expect({{ template.entity.python_name }}_model, validate=True)
    def post(self):  # type: ignore
        data = json.loads(request.data)
        {{ template.entity.identifier_column.json_property_name }} = data['{{ template.entity.identifier_column.json_property_name }}']
        {{ find_element_by_id() }}.first()
        if result is not None:
            abort(400, "A {} with {} {} already exists".format(
                '{{ template.entity.class_name }}', '{{ template.entity.identifier_column.json_property_name }}', {# -#}
                {{ template.entity.identifier_column.json_property_name }}
            ))
        result = {{ template.entity.python_name }}_schema.load(json_dict_to_python_dict(data), session=db.session)
        db.session.add(result.data)
        db.session.commit()
        return python_dict_to_json_dict(model_to_dict(result.data)), 201

{%- if template.entity.api_paths %}
{% macro joinedload(relationship) -%}
    joinedload('{{ relationship }}')
{%- endmacro %}
{% for api_path in template.entity.api_paths %}
@api.route('/{{ template.entity.python_name }}/<{{ template.entity.identifier_column.json_property_name }}>/{{ api_path.route }}', endpoint='{{ api_path.endpoint }}')
class {{ api_path.class_name }}(Resource):  # type: ignore
    @api.doc(id='{{ api_path.endpoint }}', responses={401: 'Unauthorised', 404: 'Not Found'})
    def get(self, {{ template.entity.identifier_column.json_property_name }}):  # type: ignore
        result: Optional[{{ template.entity.class_name }}] = {{ template.entity.class_name }} \
            .query \
            .options({#  -#}
    {%- set sep = joiner('.') -%}
    {%- for entity in api_path.joined_entities -%}
        {{ sep() }}{{ joinedload(entity) }}
    {%- endfor -%}
            ) \
            .filter_by({# -#}
                {{ template.entity.identifier_column.python_name }}={# -#}
                {{ template.entity.identifier_column.json_property_name }}{# -#}
            ) \
            .first()
        if result is None:
            abort(404)
        return python_dict_to_json_dict(model_to_dict(result, ['{#  -#}
    {%- set sep = joiner("', '") -%}
    {%- for entity in api_path.joined_entities -%}
        {{ sep() }}{{ entity }}
    {%- endfor %}']))
{%- endfor -%}
{%- endif %}

